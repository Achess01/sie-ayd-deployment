version: '3.8'

services:
  postgresql:
    image: postgres:15
    container_name: app-postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfiles/Dockerfile.backend
    container_name: app-backend
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/${DB_NAME}
      SPRING_DATASOURCE_USERNAME: ${DB_USER}
      SPRING_DATASOURCE_PASSWORD: ${DB_PASSWORD}
      SPRING_PROFILES_ACTIVE: ${ENVIRONMENT:-prod}
      EMAIL_SENDER_APP: ${EMAIL_SENDER_APP}
      EMAIL_SENDER_PASSWORD: ${EMAIL_SENDER_PASSWORD}
      ACCESS_KEY: ${ACCESS_KEY}
      SECRET_KEY: ${SECRET_KEY}
      BUCKET: ${BUCKET}
      REGION: ${REGION}
    ports:
      - "8090:8080"
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped


  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfiles/Dockerfile.frontend
    container_name: app-frontend
    environment:
      NODE_ENV: production
    ports:
      - "3000:80"
    restart: unless-stopped

volumes:
  postgres_data:
  # jenkins_data:

networks:
  app-network:
    driver: bridge